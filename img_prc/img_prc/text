# import cv2
# import numpy as np


# def clean_edges(edge_image, min_edge_length=10):
#     """
#     Remove short, disconnected edges from the edge-detected image using connected component analysis.
    
#     Parameters:
#     - edge_image: Input edge-detected image.
#     - min_edge_length: Minimum length of edges to keep.
    
#     Returns:
#     - cleaned_edges: Edge-detected image with short edges removed.
#     """
#         # Ensure the edge image is single-channel (grayscale)
#     if len(edge_image.shape) > 2:
#         edge_image = cv2.cvtColor(edge_image, cv2.COLOR_BGR2GRAY)

#     # Find all connected components (edges)
#     num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(edge_image, connectivity=8)
    
#     # Create an output image to store the cleaned edges
#     cleaned_edges = np.zeros_like(edge_image)
    
#     # Iterate through all detected components
#     for i in range(1, num_labels):  # Start from 1 to skip the background
#         if stats[i, cv2.CC_STAT_AREA] >= min_edge_length:
#             cleaned_edges[labels == i] = 255
    
#     return cleaned_edges


# def clarify(image, alpha=1.2, beta=50):
#     """
#     Brighten and clarify the input image.
    
#     Parameters:
#     - image: Input image.
#     - alpha: Contrast control (1.0-3.0).
#     - beta: Brightness control (0-100).
    
#     Returns:
#     - result: Brightened and clarified image.
#     """

#     # Adjust brightness and contrast
#     brightened = cv2.convertScaleAbs(image, alpha=alpha, beta=beta)
# # Convert to grayscale
    
#     # Apply histogram equalization
#     equalized = cv2.equalizeHist(brightened)
    
#     # Convert back to BGR
#     result = equalized
    
#     return result




# # def posterize(image, k):
# #     # Convert the image to float32
# #     Z = image.reshape((-1, 3))
# #     Z = np.float32(Z)
    
# #     # Define criteria and apply k-means
# #     criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
# #     ret, label, center = cv2.kmeans(Z, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
    
# #     # Convert back to uint8 and make the image
# #     center = np.uint8(center)
# #     res = center[label.flatten()]
# #     res2 = res.reshape((image.shape))
    
# #     return res2

# # Load the pre-trained Haar Cascade classifier for face detection
# face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
# eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

# cap = cv2.VideoCapture(1) #Change the index to that of your webcam
# if cap:
#     while True:
#         # Capture frame-by-frame
#         ret, frame = cap.read()
        
#         # Resize the frame to improve processing speed, smaller = better detection aswell
#         window_width = 150
#         window_height = 150
#         frame = cv2.resize(frame, (window_width, window_height))
#         #show webcam feed
#         cv2.imshow("webcam",frame)
  
        
#         # Posterize the frame
#         posterized=frame
#         #posterized = posterize(frame, 3)

#         # Convert the frame to grayscale
#         gray = cv2.cvtColor(posterized, cv2.COLOR_BGR2GRAY)
#         # Apply Canny edge detection
#         edges_head = cv2.Canny(gray, 140, 170)
#         # Detect faces in the image
#         faces = face_cascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=3, minSize=(int(window_width/6), int((window_height)/6)))
        
#         # Draw rectangles around the faces
#         for (x, y, w, h) in faces:
#             #cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
#             face_region = clarify(gray[y:y+h, x:x+w])
#             cv2.imshow("face",face_region)
#             # Apply Canny edge detection to the face region
#             edges = cv2.Canny(face_region, 200, 200)
            
#             # Replace the face region in the original frame with the edge-detected face region
#             edges_head[y:y+h, x:x+w] = edges
        
#                     # Detect eyes in the face region
#             eyes = eye_cascade.detectMultiScale(face_region)
#             for (ex, ey, ew, eh) in eyes:
#                 # Extract the eye region
#                 eye_region = face_region[ey:ey+eh, ex:ex+ew]
#                 cv2.imshow("eyes",eye_region)
#                 # Apply Canny edge detection to the eye region
#                 eye_edges = cv2.Canny(eye_region, 150,150)
                
#                 # Replace the eye region in the original frame with the edge-detected eye region
#                 edges_head[y+ey:y+ey+eh, x+ex:x+ex+ew] = eye_edges
#         cv2.imshow("beforeClean",edges_head)
#         edges_head = clean_edges(edges_head,4)
#         edges_head = cv2.resize(edges_head, (3*window_width, 3*window_height))
#         # Display the resulting frame
#         cv2.imshow('Face and Eye Detection with Edges', edges_head) 
#         # Display the resulting frame
        
#         # Posterize the frame
#         #posterized = posterize(gray, 4)
        
#         # Display the resulting frame
#         #cv2.imshow('posterized', posterized)
        
#         # Display the resulting frame
#         # Break the loop on 'q' key press
#         if cv2.waitKey(1) & 0xFF == ord('q'):
#             break

#     # Release the webcam and close windows
#     cap.release()
#     cv2.destroyAllWindows()
# else:
#     print("Please connect a webcam and try again.")